package net.neurolab.musicmap.fragments;

import java.util.ArrayList;
import java.util.List;

import net.neurolab.musicmap.MainActivity.OnDataChangedListener;
import net.neurolab.musicmap.R;
import net.neurolab.musicmap.db.Event;
import net.neurolab.musicmap.dl.DataLoader;
import net.neurolab.musicmap.dl.DataLoaderDB;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.actionbarsherlock.app.SherlockFragment;
import com.activeandroid.query.Select;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

public class FragmentTabMap extends SherlockFragment  {

	private boolean mAlreadyLoaded = false;
	private ArrayList<Event> events;
	private GoogleMap googleMap;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// Get the view from fragmenttab2.xml
		View view = inflater.inflate(R.layout.fragment_tab_map, container,
				false);

		// DataLoader dl = new DataLoaderMM();
		// DataLoader dl = new DataLoaderDB();
		// dl.LoadData(getActivity(), "Zagreb");
		/*
		 * DataLoaderSearch dl = new DataLoaderSearch();
		 * dl.LoadData(getActivity(), null); ((DataLoaderSearch)
		 * dl).searchData("a");
		 */
		/*
		 * FWIW, Class.newInstance() will fail if the class to be instantiated
		 * is primitive (e.g. "int" or "float"), is an interface, is an array,
		 * or is abstract. These four items are identified in the rather obscure
		 * "newInstance failed: p0 i0 [0 a1" message, which in this case means
		 * "newInstance failed because it was asked to instantiate an abstract class"
		 * .
		 */

		// just to display the current position
		// this can be reused to collect only shops from the preferred radius
		/*
		 * PositionProvider positionProvider = new PositionProvider(); Location
		 * location = positionProvider.getLatestCoordinates(getActivity());
		 * 
		 * if(location != null ){ Toast.makeText(getActivity(), "Location: " +
		 * location.getLatitude() + ", " + location.getLongitude(),
		 * Toast.LENGTH_SHORT).show(); }else{ Toast.makeText(getActivity(),
		 * "GPS is off", Toast.LENGTH_SHORT).show(); }
		 */
	
		try {
			// Loading map
			if (googleMap == null) {

				googleMap = ((SupportMapFragment) getChildFragmentManager()
						.findFragmentById(R.id.map)).getMap();

				// if(googleMap!=null) System.out.println("finally!");

				if (googleMap == null) {
					Toast.makeText(getActivity(),
							"Sorry! unable to create maps", Toast.LENGTH_LONG)
							.show();
				}
			}

			else if (googleMap != null) {
				// System.out.println("success");
				googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);

				// Showing / hiding your current location
				googleMap.setMyLocationEnabled(true);

				// Enable / Disable zooming controls
				googleMap.getUiSettings().setZoomControlsEnabled(false);

				// Enable / Disable my location button
				googleMap.getUiSettings().setMyLocationButtonEnabled(true);

				// Enable / Disable Compass icon
				googleMap.getUiSettings().setCompassEnabled(true);

				// Enable / Disable Rotate gesture
				googleMap.getUiSettings().setRotateGesturesEnabled(true);

				// Enable / Disable zooming functionality
				googleMap.getUiSettings().setZoomGesturesEnabled(true);

				/*
				 * double latitude = 17.385044; double longitude = 78.486671;
				 * 
				 * // lets place some 10 random markers for (int i = 0; i < 10;
				 * i++) { // random latitude and logitude double[]
				 * randomLocation = createRandLocation(latitude, longitude);
				 */
				// Adding a marker
/*
				MarkerOptions marker = null;
				marker.icon(BitmapDescriptorFactory
						.defaultMarker(BitmapDescriptorFactory.HUE_AZURE));
				for (int i = 0; i < event.size(); i++) {
					System.out.println(event.get(i).getName());
					marker = new MarkerOptions().position(new LatLng(event
							.get(i).getLat(), event.get(i).getLng()));
					googleMap.addMarker(marker);
					System.out.println(i);
				}*/
				
				googleMap.addMarker(new MarkerOptions()
		        .position(new LatLng(10, 10))
		        .title("Hello world"));

				
				CameraPosition cameraPosition = new CameraPosition.Builder()
						.target(new LatLng(10,10)).zoom(15).build();

				googleMap.animateCamera(CameraUpdateFactory
						.newCameraPosition(cameraPosition));

				// changing marker color

				/*
				 * if (i == 1) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_BLUE)); if (i ==
				 * 2) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_CYAN)); if (i ==
				 * 3) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_GREEN)); if (i ==
				 * 4) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_MAGENTA)); if (i
				 * == 5) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_ORANGE)); if (i ==
				 * 6) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_RED)); if (i == 7)
				 * marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_ROSE)); if (i ==
				 * 8) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_VIOLET)); if (i ==
				 * 9) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_YELLOW));
				 */

				// Move the camera to last position with a zoom level

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return view;
	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
		// if the data is already loaded then skip this part
		// if you don't skip it, then you will always reload the data in
		// the ExpandableListView, e.g. if you do a search, and check the
		// result data in DiscountDetailsFragment, when you press back, you
		// reload the data and loose the result.
/*
		if (savedInstanceState == null && !mAlreadyLoaded) {
			mAlreadyLoaded = true;
			DataLoader dl = new DataLoaderDB();
			dl.LoadData(getActivity(), "zagreb");

			/*
			 * if (!dl.DataLoaded()) { check if it is allowed to use web
			 * services if so, get the data SharedPreferences preferences =
			 * PreferenceManager.getDefaultSharedPreferences(getActivity());
			 * boolean webservice_enabled =
			 * preferences.getBoolean("pref_allow_web", true);
			 * if(webservice_enabled){ dl = new DataLoaderMM();
			 * dl.LoadData(getActivity(),"Zagreb"); } else{
			 * Toast.makeText(getActivity(),
			 * "Local database is empty. Get from web disabled.",
			 * Toast.LENGTH_LONG).show(); } }
			 */
/*
			this.events = dl.events;
		} else {
			loadData(this.events);
		}
		for (int i = 0; i < events.size(); i++) {
			System.out.println(events.get(i).getLat());
			System.out.println(events.get(i).getLng());
		}
		
*/
		
	}

	public void loadData(ArrayList<Event> events) {
		// now MainActivity no longer changes the list
		// Fragment is in charge for setting the data and changing the
		// expandable list
		// DiscountsExpandableAdapter adapter = new
		// DiscountsExpandableAdapter(stores, discounts);
		// adapter.setInflater( (LayoutInflater)
		// getActivity().getSystemService(FragmentActivity.LAYOUT_INFLATER_SERVICE),
		// getActivity());
		// ExpandableListView expandableList = (ExpandableListView)
		// getView().findViewById(R.id.list);

		// if(expandableList != null) {
		// expandableList.setAdapter(adapter);
		// }

		System.out.println("load data funkacija");

	}
/*
	@Override
	public void OnDataChanged(ArrayList<Event> events) {
		this.events = new ArrayList<Event>();
		this.events = events;

		loadData(events);
	}
*/
	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		setUserVisibleHint(true);
	}
	
    private void initilizeMap() {
        if (googleMap == null) {
        	googleMap = ((SupportMapFragment) getChildFragmentManager()
					.findFragmentById(R.id.map)).getMap();
 
            // check if map is created successfully or not
            if (googleMap == null) {
                Toast.makeText(getApplicationContext(),
                        "Sorry! unable to create maps", Toast.LENGTH_SHORT)
                        .show();
            }
        }
    }

}
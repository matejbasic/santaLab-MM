package net.neurolab.musicmap;

import java.util.ArrayList;

import net.neurolab.musicmap.db.Event;
import net.neurolab.musicmap.dl.DataLoader.OnDataLoadedListener;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.ViewPager;
import android.widget.Toast;

import com.actionbarsherlock.app.ActionBar;
import com.actionbarsherlock.app.ActionBar.Tab;
import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;


public class MainActivity extends SherlockFragmentActivity implements OnDataLoadedListener {

	ActionBar mActionBar;
	ViewPager mPager;
	Tab tab;

	
	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
       
        setContentView(R.layout.activity_main);
     
        
        mActionBar = getSupportActionBar();
        mActionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

        mPager = (ViewPager) findViewById(R.id.pager);
        FragmentManager fm = getSupportFragmentManager();
 
        ViewPager.SimpleOnPageChangeListener ViewPagerListener = new ViewPager.SimpleOnPageChangeListener() {
            @Override
            public void onPageSelected(int position) {
                super.onPageSelected(position);
                
                mActionBar.setSelectedNavigationItem(position);
            }
        };
 
        mPager.setOnPageChangeListener(ViewPagerListener);
        ViewPagerAdapter viewPagerAdapter = new ViewPagerAdapter(fm);
        mPager.setAdapter(viewPagerAdapter);
        
        ActionBar.TabListener tabListener = new ActionBar.TabListener() {
        	
            
        	@Override
            public void onTabSelected(Tab tab, FragmentTransaction ft) {
        	    mPager.setCurrentItem(tab.getPosition());
            }
 
            @Override
            public void onTabUnselected(Tab tab, FragmentTransaction ft) {
            	
            	
            }
 
            @Override
            public void onTabReselected(Tab tab, FragmentTransaction ft) {
            	mPager.setCurrentItem(tab.getPosition());
            }
        };
 
        tab = mActionBar.newTab().setText("Map").setTabListener(tabListener);
        mActionBar.addTab(tab);
 
        tab = mActionBar.newTab().setText("List").setTabListener(tabListener);
        mActionBar.addTab(tab);
 
        


    }

	@Override
	public void OnDataLoaded(ArrayList<Event> events) {
		
		//System.out.println("wooohooo");
		//System.out.println(events.size());
		
		// data updated: (either from database, search or web service)
		// raise the event for GoogleMapsFragment ;) so it updates the ExpandableListView   !!!!!!!!!!!!!!
		// this is because DataLoader accepts Activity as an argument, and not Fragment
		// therefore MainActivity acts as a data collector for Fragments
		//if(dlf != null) dlf.OnDataChanged(stores, discounts);
		//if(dialog != null)
			//dialog.cancel();
	}
	
	//*****************************************************************************************
	
	public interface OnDataChangedListener{
		GoogleMap googleMap;

		try {
			// Loading map
			if (googleMap == null) {
/*
				googleMap = ((SupportMapFragment) getChildFragmentManager()
						.findFragmentById(R.id.map)).getMap();
*/
				googleMap = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map)).getMap();
				// if(googleMap!=null) System.out.println("finally!");

				if (googleMap == null) {
					Toast.makeText(getActivity(),
							"Sorry! unable to create maps", Toast.LENGTH_LONG)
							.show();
				}
			}

			else if (googleMap != null) {
				// System.out.println("success");
				googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);

				// Showing / hiding your current location
				googleMap.setMyLocationEnabled(true);

				// Enable / Disable zooming controls
				googleMap.getUiSettings().setZoomControlsEnabled(false);

				// Enable / Disable my location button
				googleMap.getUiSettings().setMyLocationButtonEnabled(true);

				// Enable / Disable Compass icon
				googleMap.getUiSettings().setCompassEnabled(true);

				// Enable / Disable Rotate gesture
				googleMap.getUiSettings().setRotateGesturesEnabled(true);

				// Enable / Disable zooming functionality
				googleMap.getUiSettings().setZoomGesturesEnabled(true);

				/*
				 * double latitude = 17.385044; double longitude = 78.486671;
				 * 
				 * // lets place some 10 random markers for (int i = 0; i < 10;
				 * i++) { // random latitude and logitude double[]
				 * randomLocation = createRandLocation(latitude, longitude);
				 */
				// Adding a marker

				
				MarkerOptions marker = null;
				marker.icon(BitmapDescriptorFactory
						.defaultMarker(BitmapDescriptorFactory.HUE_AZURE));
				for (int i = 0; i < events.size(); i++) {
					System.out.println(events.get(i).getName());
					marker = new MarkerOptions().position(new LatLng(events
							.get(i).getLat(), events.get(i).getLng()));
					googleMap.addMarker(marker);
				}

				CameraPosition cameraPosition = new CameraPosition.Builder()
						.target(new LatLng(events.get(events.size() - 1)
								.getLat(), events.get(events.size() - 1)
								.getLng())).zoom(15).build();

				googleMap.animateCamera(CameraUpdateFactory
						.newCameraPosition(cameraPosition));

				// changing marker color

				/*
				 * if (i == 1) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_BLUE)); if (i ==
				 * 2) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_CYAN)); if (i ==
				 * 3) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_GREEN)); if (i ==
				 * 4) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_MAGENTA)); if (i
				 * == 5) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_ORANGE)); if (i ==
				 * 6) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_RED)); if (i == 7)
				 * marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_ROSE)); if (i ==
				 * 8) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_VIOLET)); if (i ==
				 * 9) marker.icon(BitmapDescriptorFactory
				 * .defaultMarker(BitmapDescriptorFactory.HUE_YELLOW));
				 */

				// Move the camera to last position with a zoom level

			}
		} catch (Exception e) {
			e.printStackTrace();
		}


		
		void OnDataChanged(ArrayList<Event> events);
	}
	

}

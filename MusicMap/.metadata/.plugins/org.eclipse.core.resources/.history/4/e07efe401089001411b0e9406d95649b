package net.neurolab.musicmap;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import net.neurolab.musicmap.ws.MMAsyncResultHandler;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONTokener;

import android.app.ProgressDialog;
import android.app.Service;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.os.AsyncTask;
import android.os.IBinder;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;

public class NotificationService extends Service {

	private WakeLock mWakeLock;
	


	/**
	 * Simply return null, since our Service will not be communicating with any
	 * other components. It just does its work silently.
	 */
	@Override
	public IBinder onBind(Intent intent) {
		System.out.println("ONBIND");
		return null;
	}

	/**
	 * This is where we initialize. We call this when onStart/onStartCommand is
	 * called by the system. We won't do anything with the intent here, and you
	 * probably won't, either.
	 */

	private void handleIntent(Intent intent) {
		// obtain the wake lock

		System.out.println("HANDLE INTENT");

		PowerManager pm = (PowerManager) getSystemService(POWER_SERVICE);
		mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
				"MMWakelockTag");
		mWakeLock.acquire();

		// check the global background data setting
		ConnectivityManager cm = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
		if (!cm.getActiveNetworkInfo().isAvailable()) {
			// if (!cm.getBackgroundDataSetting()) {
			System.out.println("STOP");
			stopSelf();
			return;
		}

		// do the actual work, in a separate thread
		new PollTask().execute();
	}

	private class PollTask extends AsyncTask<Object, Void, Object[]> {
		/**
		 * This is where YOU do YOUR work. There's nothing for me to write here
		 * you have to fill this in. Make your HTTP request(s) or whatever it is
		 * you have to do to get your updates in here, because this is run in a
		 * separate thread
		 */
		
		private String serviceUrl = "http://musicmap.azurewebsites.net/api";
		
		private String getEvents(String location) {
			
			String url = this.serviceUrl + "/events/0/" + location + "/0/0/25112014/26112018/10000/0/testbero=)";
			System.out.println("asynctask");
			
			String response = "";
			HttpClient httpClient = new DefaultHttpClient();
			HttpGet httpGet = new HttpGet(url);
			try {
				HttpResponse httpResponse = httpClient.execute(httpGet);
				HttpEntity httpEntity = httpResponse.getEntity();
				InputStream inputStream = httpEntity.getContent();
				
				BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"), 8);
			    StringBuilder sb = new StringBuilder();

			    
			    String line = null;
			    while ((line = reader.readLine()) != null)
			    {
			        sb.append(line + "\n");
			    }
			    
				try {
			        response = new JSONTokener(sb.toString()).nextValue().toString();
			    } catch (JSONException e) {
			    	System.out.println("Havesomeproblems");
			        e.printStackTrace();
			    }
				
				httpClient.getConnectionManager().shutdown();
				//System.out.println(response);
				return response;
		}
			catch (ClientProtocolException e) {
				e.printStackTrace();
			} 
			catch (IOException e) {
				e.printStackTrace();
			}
			catch(Error e) {
				e.printStackTrace();
			}
			return "";
			
		}

		@Override
		protected Object[] doInBackground(Object... params) {
			// do stuff!
			
			System.out.println("DO IN BACKGROUND");
			
			Object result[] = new Object[] { "", false, null, null };
			result[2] = (ProgressDialog) params[2];
			result[3] = (MMAsyncResultHandler) params[3];
			
			String entity = (String) params[0];
			String action = (String) params[1];
			
		if (entity.matches("getEvents")) {				
					//if (params[4] != null && params[5] != null) {
						//params[4] - id | params[5] - idHash
						String response = null;
						String location = (String) params[1];
						
						response = this.getEvents(location);
						
						result[0] = response;
						result[1] = true;
					//}
					//else {
						//result[1] = false;
				//	}
					
			}
			
			return result;
		}

		/**
		 * In here you should interpret whatever you fetched in doInBackground
		 * and push any notifications you need to the status bar, using the
		 * NotificationManager. I will not cover this here, go check the docs on
		 * NotificationManager.
		 *
		 * What you HAVE to do is call stopSelf() after you've pushed your
		 * notification(s). This will: 1) Kill the service so it doesn't waste
		 * precious resources 2) Call onDestroy() which will release the wake
		 * lock, so the device can go to sleep again and save precious battery.
		 */
		@Override
		protected void onPostExecute(Object[] result) {
			if ((ProgressDialog) result[2] != null) {
				((ProgressDialog) result[2]).cancel();
			}
			if ((MMAsyncResultHandler) result[3] != null) {
				((MMAsyncResultHandler) result[3]).handleResult((String)result[0], (Boolean)result[1]);
			}
			
			stopSelf();
		}

	}

	/**
	 * This is deprecated, but you have to implement it if you're planning on
	 * supporting devices with an API level lower than 5 (Android 2.0).
	 */
	@Override
	public void onStart(Intent intent, int startId) {
		System.out.println("onSTART");
		handleIntent(intent);
	}

	/**
	 * This is called on 2.0+ (API level 5 or higher). Returning
	 * START_NOT_STICKY tells the system to not restart the service if it is
	 * killed because of poor resource (memory/cpu) conditions.
	 */
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		System.out.println("onSTARTCOMMAND");
		handleIntent(intent);
		return START_NOT_STICKY;
	}

	/**
	 * In onDestroy() we release our wake lock. This ensures that whenever the
	 * Service stops (killed for resources, stopSelf() called, etc.), the wake
	 * lock will be released.
	 */
	public void onDestroy() {
		super.onDestroy();
		mWakeLock.release();
	}

	
}

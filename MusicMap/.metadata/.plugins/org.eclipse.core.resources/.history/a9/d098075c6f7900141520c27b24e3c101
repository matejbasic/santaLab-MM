package net.neurolab.musicmap.dl;

import net.neurolab.musicmap.db.Event;
import net.neurolab.musicmap.db.Location;
import net.neurolab.musicmap.ws.JSONAdapter;
import net.neurolab.musicmap.ws.MMAsyncResultHandler;
import net.neurolab.musicmap.ws.MMAsyncTask;
import android.app.Activity;

public class DataLoaderMM extends DataLoader{

	private boolean eventsLoaded = false;
	//private boolean locationsLoaded = false;
	//...
	
	@Override
	public void LoadData(Activity activity) {
		super.LoadData(activity);
		
		MMAsyncTask asyncTaskEvents = new MMAsyncTask();
		Object paramsEvent[] = new Object[]{"getEvents", null, null, eventsHandler, null, null};
		asyncTaskEvents.execute(paramsEvent);		
		
	}
	
	/*
	 * 			if (ok)
			{
				try {
					events = JSONAdapter.getEvents(result);
					for (Event e : events) {
						//DODATI DIO S LOKACIJAMA 
						e.save();
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			eventsLoaded = true;			
			DataLoaded();//iz DataLoadera - ako su podaci uèitani vraæa true... goto DataLoader.java :)
		}
	 */
	
	MMAsyncResultHandler eventsHandler = new MMAsyncResultHandler(){

		@Override
		public void handleResult(String result, Boolean status) {
			
				try {
					events = JSONAdapter.getEvents(result);
					for (Event e : events) {
						//DODATI DIO S LOKACIJAMA 
						e.save();
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			eventsLoaded = true;			
			DataLoaded();//iz DataLoadera - ako su podaci uèitani vraæa true... goto DataLoader.java :)
		}		
	};
	
	MMAsyncResultHandler locationsHandler = new MMAsyncResultHandler(){

		@Override
		public void handleResult(String result, Boolean status) {
			try {
				locations = JSONAdapter.getLocations(result);
				for (Location l : locations) {
					//DODATI DIO S LOKACIJAMA 
					l.save();
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	
	};
	
	private void showLoadedData()
	{
		//Synchronization of results
		if (eventsLoaded)
		{
			bindLocationsToEvents();
			
			eventsLoaded = false;			
			
			DataLoaded();
		}
	}
		
	private void bindLocationsToEvents() {//join
		for (Location l : locations) {
			for (Event e : events) {
				if(/*Pronaæi naèin povežemo lokacije i dogaðaje*/){
					d.setLocation(l);
					e.save();
				}
			}
		}
	}
}
